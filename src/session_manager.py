import json
import os
import uuid
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)


@dataclass
class SessionContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    current_working_dir: str = "/"
    environment_vars: Dict[str, str] = None
    user_permissions: List[str] = None
    preferred_tools: List[str] = None

    def __post_init__(self):
        if self.environment_vars is None:
            self.environment_vars = {}
        if self.user_permissions is None:
            self.user_permissions = ["file_read", "file_write", "process_view"]
        if self.preferred_tools is None:
            self.preferred_tools = ["find", "grep", "ls", "cat"]


@dataclass
class SessionEvent:
    """–°–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Å—Å–∏–∏"""
    id: str
    timestamp: datetime
    query: str
    command: str
    status: str  # SUCCESS, ERROR, BLOCKED, CANCELLED
    output: Optional[str] = None
    error: Optional[str] = None
    execution_time: Optional[float] = None


class Session:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    def __init__(self, session_id: str = None, max_history: int = 100):
        self.id = session_id or str(uuid.uuid4())
        self.created_at = datetime.now()
        self.updated_at = datetime.now()
        self.context = SessionContext()
        self.events: List[SessionEvent] = []
        self.max_history = max_history
        self.metadata = {
            "user_skill_level": "beginner",  # beginner, intermediate, advanced
            "preferred_language": "russian",
            "trust_level": 1.0,  # 0.0 - 1.0, –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫
        }

    def add_event(self, query: str, command: str, status: str,
                  output: str = None, error: str = None, execution_time: float = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏"""
        event = SessionEvent(
            id=str(uuid.uuid4()),
            timestamp=datetime.now(),
            query=query,
            command=command,
            status=status,
            output=output,
            error=error,
            execution_time=execution_time
        )

        self.events.append(event)
        self.updated_at = datetime.now()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.events) > self.max_history:
            self.events = self.events[-self.max_history:]

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Å—Å–∏—é {self.id}: {status}")
        return event

    def get_recent_events(self, count: int = 10) -> List[SessionEvent]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        return self.events[-count:] if self.events else []

    def get_statistics(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏"""
        total = len(self.events)
        if total == 0:
            return {}

        status_counts = {}
        for event in self.events:
            status_counts[event.status] = status_counts.get(event.status, 0) + 1

        return {
            "total_commands": total,
            "successful_commands": status_counts.get("SUCCESS", 0),
            "failed_commands": status_counts.get("ERROR", 0),
            "blocked_commands": status_counts.get("BLOCKED", 0),
            "success_rate": (status_counts.get("SUCCESS", 0) / total) * 100,
            "session_duration": str(self.updated_at - self.created_at)
        }

    def update_context_from_command(self, command: str, output: str, error: str = None):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""

        cmd_lower = command.lower()

        # 1. –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ê–ë–û–ß–ï–ô –î–ò–†–ï–ö–¢–û–†–ò–ò
        if cmd_lower.startswith('cd '):
            new_dir = command[3:].strip()
            if not error and "no such file" not in output.lower() and "not a directory" not in output.lower():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
                if new_dir.startswith('/'):
                    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                    self.context.current_working_dir = new_dir
                elif new_dir == '..':
                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                    if self.context.current_working_dir != '/':
                        parts = self.context.current_working_dir.rstrip('/').split('/')
                        self.context.current_working_dir = '/'.join(parts[:-1]) or '/'
                elif new_dir == '~':
                    # –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                    self.context.current_working_dir = os.path.expanduser('~')
                else:
                    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    if self.context.current_working_dir == '/':
                        self.context.current_working_dir = f'/{new_dir}'
                    else:
                        self.context.current_working_dir = f'{self.context.current_working_dir}/{new_dir}'
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.context.current_working_dir}")

        # 2. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
        if cmd_lower.startswith('export '):
            # –ü–∞—Ä—Å–∏–º export VAR=value
            parts = command[7:].strip().split('=', 1)
            if len(parts) == 2:
                var, value = parts
                self.context.environment_vars[var.strip()] = value.strip()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var.strip()}")

        # 3. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        self._update_user_preferences(command, output, error)

        # 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –£–†–û–í–ù–Ø –ù–ê–í–´–ö–û–í
        self._update_user_metadata(command, output, error)

    def _update_user_preferences(self, command: str, output: str, error: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥"""
        cmd_lower = command.lower()

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_used = []

        if any(tool in cmd_lower for tool in ['find', 'locate']):
            tools_used.append('find')
        if any(tool in cmd_lower for tool in ['grep', 'awk', 'sed']):
            tools_used.append('text_processing')
        if any(tool in cmd_lower for tool in ['docker', 'podman']):
            tools_used.append('containers')
        if any(tool in cmd_lower for tool in ['git']):
            tools_used.append('version_control')
        if any(tool in cmd_lower for tool in ['python', 'pip']):
            tools_used.append('python')

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ)
        for tool in tools_used:
            if tool not in self.context.preferred_tools:
                self.context.preferred_tools.append(tool)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 10 —Å–∞–º—ã–º–∏ —á–∞—Å—Ç—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        if len(self.context.preferred_tools) > 10:
            self.context.preferred_tools = self.context.preferred_tools[-10:]

    def _update_user_metadata(self, command: str, output: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        complex_patterns = ['awk', 'sed', 'xargs', 'find.*-exec', 'grep -P']
        if any(pattern in command for pattern in complex_patterns):
            self.metadata["user_skill_level"] = "advanced"
        elif self.metadata["user_skill_level"] == "beginner" and len(self.events) > 5:
            self.metadata["user_skill_level"] = "intermediate"

    def search_history(self, query: str, max_results: int = 5) -> List[SessionEvent]:
        """–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏"""
        results = []
        query_lower = query.lower()

        for event in self.events:
            # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if query_lower in event.query.lower():
                results.append(event)
            # –ü–æ–∏—Å–∫ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
            elif query_lower in event.command.lower():
                results.append(event)
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            elif event.output and query_lower in event.output.lower():
                results.append(event)

        return results[-max_results:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

    # –ò –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
    def handle_search_command(session: 'Session', query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
        results = session.search_history(query)
        if not results:
            print(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':")
        for i, event in enumerate(results, 1):
            print(f"{i}. [{event.status}] {event.query}")
            print(f"   ‚Üí {event.command}")
            if event.output:
                print(f"   üìã {event.output[:100]}...")


class SessionManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""

    def __init__(self, storage_path: str = "sessions"):
        self.sessions: Dict[str, Session] = {}
        self.storage_path = Path(storage_path)
        self.storage_path.mkdir(exist_ok=True)
        self.current_session_id: Optional[str] = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
        self._load_sessions()

    def create_session(self, session_id: str = None) -> Session:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        session = Session(session_id)
        self.sessions[session.id] = session
        self.current_session_id = session.id

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session.id}")
        return session

    def get_current_session(self) -> Optional[Session]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é"""
        if self.current_session_id and self.current_session_id in self.sessions:
            return self.sessions[self.current_session_id]
        return None

    def get_or_create_current_session(self) -> Session:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
        session = self.get_current_session()
        if not session:
            session = self.create_session()
        return session

    def switch_session(self, session_id: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        if session_id in self.sessions:
            self.current_session_id = session_id
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ—Å—Å–∏—é: {session_id}")
            return True
        return False

    def list_sessions(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        sessions_info = []
        for session_id, session in self.sessions.items():
            stats = session.get_statistics()
            sessions_info.append({
                "id": session_id,
                "created_at": session.created_at,
                "updated_at": session.updated_at,
                "event_count": len(session.events),
                "is_current": session_id == self.current_session_id,
                **stats
            })

        return sorted(sessions_info, key=lambda x: x['updated_at'], reverse=True)

    def save_session(self, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª"""
        session_id = session_id or self.current_session_id
        if not session_id or session_id not in self.sessions:
            return

        session = self.sessions[session_id]
        session_file = self.storage_path / f"{session_id}.json"

        try:
            session_data = {
                "id": session.id,
                "created_at": session.created_at.isoformat(),
                "updated_at": session.updated_at.isoformat(),
                "context": asdict(session.context),
                "metadata": session.metadata,
                "events": [
                    {
                        "id": event.id,
                        "timestamp": event.timestamp.isoformat(),
                        "query": event.query,
                        "command": event.command,
                        "status": event.status,
                        "output": event.output,
                        "error": event.error,
                        "execution_time": event.execution_time
                    }
                    for event in session.events
                ]
            }

            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2)

            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")

    def _load_sessions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        for session_file in self.storage_path.glob("*.json"):
            try:
                with open(session_file, 'r', encoding='utf-8') as f:
                    session_data = json.load(f)

                session = Session(session_data["id"])
                session.created_at = datetime.fromisoformat(session_data["created_at"])
                session.updated_at = datetime.fromisoformat(session_data["updated_at"])
                session.context = SessionContext(**session_data["context"])
                session.metadata = session_data["metadata"]

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                for event_data in session_data.get("events", []):
                    event = SessionEvent(
                        id=event_data["id"],
                        timestamp=datetime.fromisoformat(event_data["timestamp"]),
                        query=event_data["query"],
                        command=event_data["command"],
                        status=event_data["status"],
                        output=event_data.get("output"),
                        error=event_data.get("error"),
                        execution_time=event_data.get("execution_time")
                    )
                    session.events.append(event)

                self.sessions[session.id] = session
                logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session.id}")


            except (json.JSONDecodeError, KeyError, ValueError) as e:
                logger.error(f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                backup_file = session_file.with_suffix('.json.corrupted')
                session_file.rename(backup_file)
                print(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_file.stem} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")

    def cleanup_old_sessions(self, days: int = 30, max_sessions: int = 100):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É"""
        # –ü–æ –≤—Ä–µ–º–µ–Ω–∏
        cutoff_date = datetime.now() - timedelta(days=days)
        # –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–æ—Å—Ç–∞–≤–ª—è–µ–º N —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö)
        sessions_to_keep = sorted(
            self.sessions.values(),
            key=lambda s: s.updated_at,
            reverse=True
        )[:max_sessions]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        for session in list(self.sessions.values()):
            if session not in sessions_to_keep and session.updated_at < cutoff_date:
                self._delete_session(session.id)


    def find_session_by_prefix(self, prefix: str) -> Optional[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
        """
        matching_sessions = []
        for session_id in self.sessions.keys():
            if session_id.startswith(prefix):
                matching_sessions.append(session_id)

        if len(matching_sessions) == 1:
            return matching_sessions[0]
        elif len(matching_sessions) > 1:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π:")
            for session_id in matching_sessions:
                print(f"  {session_id}")
            return None
        else:
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager()