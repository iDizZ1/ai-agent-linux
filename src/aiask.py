# aiask.py - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ä–∞–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

import typer
import logging
from config import setup_logging
from llm_client import generate_command
from executor import run_command, is_dangerous_command

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = logging.getLogger(__name__)

app = typer.Typer(add_completion=False, help="AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ bash –∫–æ–º–∞–Ω–¥")

@app.command()
def ask(query: str = typer.Argument(..., help="–ó–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ LLM –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {query}")
    
    try:
        resp = generate_command(query)
        cmd, expl = resp["command"], resp.get("explanation", "")
        
        if not cmd:
            typer.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM.")
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
            return
        
        # –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–û –í–´–í–û–î–ê
        if is_dangerous_command(cmd):
            typer.echo(f"üö® –û–ü–ê–°–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê!")
            typer.echo(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
            typer.echo(f"‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–π –≤—Ä–µ–¥ —Å–∏—Å—Ç–µ–º–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")
            logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            return
            
        typer.echo(f"ü§ñ –ö–æ–º–∞–Ω–¥–∞: {cmd}")
        if expl:
            typer.echo(f"üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {expl}")
            
        if typer.confirm("–í—ã–ø–æ–ª–Ω–∏—Ç—å?"):
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
            code, out, err = run_command(cmd)
            
            if code == 0:
                typer.echo("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                if out.strip():
                    typer.echo(out)
            else:
                if "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏" in err.lower() or "timeout" in err.lower():
                    typer.echo(f"‚è±Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è (timeout)")
                else:
                    typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–¥ {code})")
                if err.strip():
                    typer.echo(f"–î–µ—Ç–∞–ª–∏: {err}")
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
            typer.echo("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except Exception as e:
        logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ ask: {e}")
        typer.echo(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@app.callback(invoke_without_command=True)
def main(ctx: typer.Context):
    """
    –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º.
    """
    if ctx.invoked_subcommand is None:
        logger.info("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        from interactive import interactive_loop
        interactive_loop()

if __name__ == "__main__":
    app()