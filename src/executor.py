# executor.py - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ 

import subprocess
import logging
from typing import Tuple, Optional
from enum import Enum

logger = logging.getLogger(__name__)

class CommandCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    SAFE = "safe"          # read-only –∫–æ–º–∞–Ω–¥—ã
    WRITE = "write"        # –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω—è—é—â–∏–µ —Ñ–∞–π–ª—ã
    DANGEROUS = "dangerous" # –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ
    CRITICAL = "critical"   # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –æ–ø–∞—Å–Ω—ã–µ

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–≠–¢–ê–ü 2.1)
DANGEROUS_PATTERNS = [
    'rm -rf /',
    'rm -rf /*',
    'rm -rf ~',
    'rm -rf *',
    'rm -r /',
    'dd if=',
    'mkfs',
    'fdisk',
    ':(){',       # fork bomb
    ':()',
    '> /dev/sd',
    'format',
    'deltree',
    'chmod -R 777 /',
    'chown -R',
    '> /dev/null &',
    'wget http',  # —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    'curl http',
    '| sh',       # pipe –≤ shell
    '| bash',
    '; rm',
    '&& rm',
    'shred',
    'kill -9',    # –º–∞—Å—Å–æ–≤–æ–µ —É–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    'pkill',
    'shutdown',
    'reboot',
    'init 0',
    'init 6',
]

# Whitelist –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ 
SAFE_COMMANDS = {
    'ls', 'cat', 'less', 'more', 'head', 'tail', 'pwd', 'echo',
    'whoami', 'id', 'date', 'cal', 'which', 'whereis', 'locate',
    'find', 'grep', 'wc', 'sort', 'uniq', 'cut', 'awk', 'sed',
    'df', 'du', 'free', 'ps', 'top', 'history'
}

def categorize_command(cmd: str) -> CommandCategory:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    Args:
        cmd: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        CommandCategory: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã
    """
    cmd_lower = cmd.lower().strip()
    first_word = cmd_lower.split()[0] if cmd_lower.split() else ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for pattern in DANGEROUS_PATTERNS:
        if pattern.lower() in cmd_lower:
            return CommandCategory.CRITICAL
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (read-only)
    if first_word in SAFE_COMMANDS:
        return CommandCategory.SAFE
    
    # –ö–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω—è—é—â–∏–µ —Ñ–∞–π–ª—ã
    write_commands = {'touch', 'mkdir', 'cp', 'mv', 'echo', 'tee'}
    if first_word in write_commands:
        return CommandCategory.WRITE
    
    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ
    dangerous_commands = {'rm', 'chmod', 'chown', 'kill', 'sudo', 'su'}
    if first_word in dangerous_commands:
        return CommandCategory.DANGEROUS
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - write
    return CommandCategory.WRITE

def is_dangerous_command(cmd: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.
    –†–∞–Ω–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –î–û –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    
    Args:
        cmd: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ–ø–∞—Å–Ω–∞—è
    """
    category = categorize_command(cmd)
    
    if category == CommandCategory.CRITICAL:
        logger.warning(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–ê–°–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {cmd}")
        return True
    
    if category == CommandCategory.DANGEROUS:
        logger.warning(f"‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
        # –î–ª—è dangerous –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
        return False
    
    return False

def run_command(cmd: str, timeout: int = 60) -> Tuple[int, str, str]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç bash –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏.
    
    Args:
        cmd: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        Tuple[int, str, str]: (return_code, stdout, stderr)
    """
    category = categorize_command(cmd)
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã [{category.value}]: {cmd}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    if is_dangerous_command(cmd):
        error_msg = "‚õî –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        logger.error(error_msg)
        return 1, "", error_msg
    
    try:
        logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å timeout={timeout}s")
        completed = subprocess.run(
            cmd,
            shell=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=timeout
        )
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ [–∫–æ–¥ {completed.returncode}]")
        
        if completed.stdout:
            logger.debug(f"STDOUT: {completed.stdout[:200]}...")
        if completed.stderr:
            logger.debug(f"STDERR: {completed.stderr[:200]}...")
            
        return completed.returncode, completed.stdout, completed.stderr
        
    except subprocess.TimeoutExpired:
        error_msg = f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({timeout}s)"
        logger.error(error_msg)
        return 1, "", error_msg
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
        logger.error(error_msg, exc_info=True)
        return 1, "", error_msg