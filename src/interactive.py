# interactive.py
import logging
import os
import time
from colorama import Fore, Style, init
from llm_client import generate_command
from executor import run_command, is_dangerous_command, categorize_command, CommandCategory
from session_manager import session_manager, Session
from database import db_manager  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

logger = logging.getLogger(__name__)


def interactive_loop():
    """
    –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Å—Å–∏–∏
    """
    restart_required = False

    while True:
        if restart_required:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
            session = session_manager.get_or_create_current_session()
            restart_required = False
            print(f"{Fore.CYAN}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å —Å–µ—Å—Å–∏–µ–π: {session.id[:8]}...")
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
            session = session_manager.get_or_create_current_session()

        logger.info(f"–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {session.id}")

        print(f"{Fore.CYAN}ü§ñ –ó–∞–ø—É—â–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        print(f"{Fore.GREEN}üìÅ –°–µ—Å—Å–∏—è: {session.id[:8]}...")
        print(f"{Fore.YELLOW}üí¨ –í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print(f"{Fore.YELLOW}üìù –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏")
        print(f"{Fore.YELLOW}üìä –í–≤–µ–¥–∏—Ç–µ 'history' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏")
        print(f"{Fore.YELLOW}üîß –í–≤–µ–¥–∏—Ç–µ 'session' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏")
        print(f"{Fore.YELLOW}üóÉÔ∏è –í–≤–µ–¥–∏—Ç–µ 'context' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ë–î")
        print("-" * 50)

        session_exit = False

        while not session_exit and not restart_required:
            try:
                prompt = input(f"{Fore.GREEN}AIask[{session.id[:8]}]> {Style.RESET_ALL}").strip()

                if prompt.lower() in ("exit", "quit", "q"):
                    logger.info("–í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                    session_manager.save_session(session.id)
                    print(f"{Fore.CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                    session_exit = True
                    continue

                if prompt.lower() == "help":
                    show_help()
                    continue

                if prompt.lower() == "history":
                    show_session_history(session)
                    continue

                if prompt.lower() == "session":
                    restart_needed = handle_session_commands(session)
                    if restart_needed:
                        restart_required = True
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    continue
                    
                if prompt.lower() == "context":
                    show_database_context(session)
                    continue

                if prompt.lower() == "clear":
                    os.system('clear' if os.name != 'nt' else 'cls')
                    continue

                if not prompt:
                    continue

                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {prompt}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
                enhanced_prompt = enhance_prompt_with_context(prompt, session)
                resp = generate_command(enhanced_prompt)

                # –ó–ê–©–ò–¢–ê –û–¢ None –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                if not resp or not isinstance(resp, dict):
                    print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞: AI –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç generate_command: {resp}")
                    session.add_event(prompt, "", "AI_ERROR")
                    continue

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                cmd = resp.get("command", "")
                expl = resp.get("explanation", "")

                if not cmd:
                    print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
                    if expl:
                        print(f"{Fore.YELLOW}üí° AI —Å–æ–æ–±—â–µ–Ω–∏–µ: {expl}")
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
                    session.add_event(prompt, "", "GENERATION_ERROR")
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –î–û –≤—ã–≤–æ–¥–∞
                if is_dangerous_command(cmd):
                    print(f"{Fore.RED}üö® –û–ü–ê–°–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê!")
                    print(f"{Fore.YELLOW}–ö–æ–º–∞–Ω–¥–∞: {cmd}")
                    print(f"{Fore.RED}‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–π –≤—Ä–µ–¥ —Å–∏—Å—Ç–µ–º—ã.")
                    logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
                    session.add_event(prompt, cmd, "BLOCKED")
                    session_manager.save_session(session.id)
                    continue

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã
                category = categorize_command(cmd)
                category_icon = {
                    CommandCategory.SAFE: f"{Fore.GREEN}‚úì",
                    CommandCategory.WRITE: f"{Fore.YELLOW}‚úé",
                    CommandCategory.DANGEROUS: f"{Fore.MAGENTA}‚ö†",
                    CommandCategory.CRITICAL: f"{Fore.RED}‚õî"
                }

                print(f"{Fore.CYAN}ü§ñ –ö–æ–º–∞–Ω–¥–∞: {Fore.WHITE}{cmd} {category_icon.get(category, '')}")
                if expl:
                    print(f"{Fore.BLUE}üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {expl}")

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                confirm = input(f"{Fore.YELLOW}–í—ã–ø–æ–ª–Ω–∏—Ç—å? [y/N]: {Style.RESET_ALL}").strip().lower()

                if confirm in ('y', 'yes', '–¥–∞'):
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

                    start_time = time.time()
                    code, out, err = run_command(cmd)
                    execution_time = time.time() - start_time

                    if code == 0:
                        print(f"{Fore.GREEN}‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        if out.strip():
                            print(f"{Style.RESET_ALL}{out}")

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
                        session.update_context_from_command(cmd, out)
                        session.add_event(prompt, cmd, "SUCCESS", out, None, execution_time)
                    else:
                        if "–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏" in err.lower() or "timeout" in err.lower():
                            print(f"{Fore.YELLOW}‚è±Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è (timeout)")
                        else:
                            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–¥ {code})")
                        if err.strip():
                            print(f"{Fore.RED}–î–µ—Ç–∞–ª–∏: {err}")
                        session.add_event(prompt, cmd, "ERROR", out, err, execution_time)

                    # –ê–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    session_manager.save_session(session.id)
                else:
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                    print(f"{Fore.YELLOW}‚è≠Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    session.add_event(prompt, cmd, "CANCELLED")

            except KeyboardInterrupt:
                logger.info("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Ctrl+C")
                session_manager.save_session(session.id)
                print(f"\n{Fore.CYAN}üëã –í—ã—Ö–æ–¥ –ø–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é... –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                session_exit = True
                break

            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
                print(f"{Fore.RED}‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                print(f"{Fore.YELLOW}üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                if 'prompt' in locals():
                    session.add_event(prompt, "", "SYSTEM_ERROR", error=str(e))

        if session_exit:
            break  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã


def handle_session_commands(session: Session) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
    """
    print(f"\n{Fore.CYAN}üîÑ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò")
    print(f"{Fore.GREEN}–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {session.id}")

    stats = session.get_statistics()
    if stats:
        print(f"{Fore.YELLOW}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats['total_commands']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_commands']}")
        print(f"  –û—à–∏–±–æ–∫: {stats['failed_commands']}")
        print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('blocked_commands', 0)}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")

    print(f"\n{Fore.CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print(f"  {Fore.GREEN}list{Style.RESET_ALL} - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π")
    print(f"  {Fore.GREEN}new{Style.RESET_ALL} - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
    print(f"  {Fore.GREEN}save{Style.RESET_ALL} - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é")
    print(f"  {Fore.GREEN}switch <id>{Style.RESET_ALL} - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é")
    print(f"  {Fore.GREEN}info <id>{Style.RESET_ALL} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏")
    print(f"  {Fore.GREEN}delete <id>{Style.RESET_ALL} - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é")
    print(f"  {Fore.GREEN}back{Style.RESET_ALL} - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ")

    command = input(f"\n{Fore.YELLOW}session> {Style.RESET_ALL}").strip().lower()

    if command == "back":
        return False  # –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

    if command == "list":
        sessions_list = session_manager.list_sessions()
        print(f"\n{Fore.CYAN}üìã –°–ï–°–°–ò–ò:")
        for s in sessions_list:
            current_flag = " ‚Üê —Ç–µ–∫—É—â–∞—è" if s['is_current'] else ""
            print(
                f"  {s['id']} - {s['event_count']} –∫–æ–º–∞–Ω–¥, –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {s['updated_at'].strftime('%H:%M')}{current_flag}")
        return False

    elif command == "new":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π
        session_manager.save_session(session.id)

        new_session = session_manager.create_session()
        print(f"{Fore.GREEN}‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {new_session.id}")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_manager.switch_session(new_session.id)
        return True  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞

    elif command == "save":
        session_manager.save_session(session.id)
        print(f"{Fore.GREEN}‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return False

    elif command.startswith("switch "):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
        session_manager.save_session(session.id)

        target_id = command[7:].strip()

        # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É ID
        if target_id in session_manager.sessions:
            if session_manager.switch_session(target_id):
                print(f"{Fore.GREEN}‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–µ—Å—Å–∏—é: {target_id}")
                return True  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
            else:
                print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                return False
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
            matching_sessions = []
            for session_id in session_manager.sessions.keys():
                if session_id.startswith(target_id):
                    matching_sessions.append(session_id)

            if len(matching_sessions) == 1:
                full_id = matching_sessions[0]
                if session_manager.switch_session(full_id):
                    print(f"{Fore.GREEN}‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–µ—Å—Å–∏—é: {full_id}")
                    return True  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
                else:
                    print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
                    return False
            elif len(matching_sessions) > 1:
                print(f"{Fore.YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π:")
                for session_id in matching_sessions:
                    print(f"  {session_id}")
                print(f"{Fore.YELLOW}üí° –£—Ç–æ—á–Ω–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏")
                return False
            else:
                print(f"{Fore.RED}‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_id}")
                return False

    elif command.startswith("info "):
        target_id = command[5:].strip()

        # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
        target_session = None
        if target_id in session_manager.sessions:
            target_session = session_manager.sessions[target_id]
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
            matching_sessions = [sid for sid in session_manager.sessions.keys()
                                 if sid.startswith(target_id)]
            if len(matching_sessions) == 1:
                target_session = session_manager.sessions[matching_sessions[0]]
            elif len(matching_sessions) > 1:
                print(f"{Fore.YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π:")
                for session_id in matching_sessions:
                    print(f"  {session_id}")
                return False

        if target_session:
            _show_session_info(target_session)
        else:
            print(f"{Fore.RED}‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_id}")
        return False

    elif command.startswith("delete "):
        target_id = command[7:].strip()

        # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        if target_id == session.id or target_id == session.id[:8]:
            print(f"{Fore.RED}‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é!")
            print(f"{Fore.YELLOW}üí° –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥—É—é —Å–µ—Å—Å–∏—é —Å–Ω–∞—á–∞–ª–∞")
            return False

        # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        session_to_delete = None
        if target_id in session_manager.sessions:
            session_to_delete = target_id
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
            matching_sessions = [sid for sid in session_manager.sessions.keys()
                                 if sid.startswith(target_id)]
            if len(matching_sessions) == 1:
                session_to_delete = matching_sessions[0]
            elif len(matching_sessions) > 1:
                print(f"{Fore.YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π:")
                for session_id in matching_sessions:
                    print(f"  {session_id}")
                return False

        if session_to_delete:
            if session_to_delete in session_manager.sessions:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                session_file = session_manager.storage_path / f"{session_to_delete}.json"
                if session_file.exists():
                    os.remove(session_file)

                # –£–¥–∞–ª—è–µ–º –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                del session_manager.sessions[session_to_delete]
                print(f"{Fore.GREEN}‚úÖ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {session_to_delete}")
            else:
                print(f"{Fore.RED}‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_id}")
        else:
            print(f"{Fore.RED}‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_id}")
        return False

    return False


def _show_session_info(session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏"""
    stats = session.get_statistics()

    print(f"\n{Fore.CYAN}{'=' * 60}")
    print(f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–°–°–ò–ò")
    print(f"{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}ID: {session.id}")
    print(f"{Fore.GREEN}–°–æ–∑–¥–∞–Ω–∞: {session.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{Fore.GREEN}–û–±–Ω–æ–≤–ª–µ–Ω–∞: {session.updated_at.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{Fore.GREEN}–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session.updated_at - session.created_at}")

    print(f"\n{Fore.YELLOW}üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    if stats:
        for key, value in stats.items():
            print(f"  {key}: {value}")
    else:
        print(f"  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")

    print(f"\n{Fore.BLUE}üéØ –ö–û–ù–¢–ï–ö–°–¢:")
    print(f"  –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {session.context.current_working_dir}")
    print(f"  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {len(session.context.environment_vars)}")
    print(f"  –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {', '.join(session.context.user_permissions)}")
    print(f"  –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(session.context.preferred_tools)}")

    print(f"\n{Fore.MAGENTA}üë§ –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
    for key, value in session.metadata.items():
        print(f"  {key}: {value}")

    print(f"\n{Fore.CYAN}üìú –ü–û–°–õ–ï–î–ù–ò–ï –ö–û–ú–ê–ù–î–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
    recent_events = session.get_recent_events(5)
    if recent_events:
        for i, event in enumerate(recent_events, 1):
            status_icon = {
                "SUCCESS": f"{Fore.GREEN}‚úÖ",
                "ERROR": f"{Fore.RED}‚ùå",
                "BLOCKED": f"{Fore.RED}üö®",
                "CANCELLED": f"{Fore.YELLOW}‚è≠Ô∏è"
            }
            icon = status_icon.get(event.status, "")
            print(f"  {icon} {event.timestamp.strftime('%H:%M:%S')} - {event.command}")
    else:
        print(f"  –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")


def show_database_context(session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    context = db_manager.get_session_context(session.id)
    if not context:
        print(f"{Fore.YELLOW}üì≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    print(f"\n{Fore.CYAN}{'=' * 60}")
    print(f"üóÉÔ∏è –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print(f"{'=' * 60}{Style.RESET_ALL}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
    session_data = context['session']
    print(f"{Fore.GREEN}üìÅ –°–ï–°–°–ò–Ø:")
    print(f"  ID: {session_data['id']}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {session_data['current_working_dir']}")
    print(f"  –£—Ä–æ–≤–µ–Ω—å: {session_data['user_skill_level']}")
    print(f"  –Ø–∑—ã–∫: {session_data['preferred_language']}")
    print(f"  –î–æ–≤–µ—Ä–∏–µ: {session_data['trust_level']}")
    
    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if context['user_preferences']:
        print(f"\n{Fore.BLUE}üéØ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:")
        for pref in context['user_preferences']:
            success_rate = pref['success_rate'] * 100
            print(f"  {pref['tool_name']}: {pref['usage_count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, {success_rate:.1f}% —É—Å–ø–µ—Ö–∞")
    
    # –ó–Ω–∞–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    if context['system_knowledge']:
        print(f"\n{Fore.MAGENTA}üìö –ò–ó–í–ï–°–¢–ù–´–ï –§–ê–ô–õ–´/–ü–†–û–¶–ï–°–°–´:")
        knowledge_by_category = {}
        for item in context['system_knowledge']:
            category = item['category']
            if category not in knowledge_by_category:
                knowledge_by_category[category] = []
            knowledge_by_category[category].append(item)
            
        for category, items in knowledge_by_category.items():
            print(f"  {category.upper()}:")
            for item in items[:3]:
                print(f"    {item['item_path']}")
    
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")


def enhance_prompt_with_context(prompt: str, session: Session) -> str:
    """
    –£–º–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
    –ë–µ–∑ —ç–º–æ–¥–∑–∏ - —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    """
    context_parts = []

    # 1. –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´
    context_parts.append("–ö–û–ù–¢–ï–ö–°–¢ –°–ò–°–¢–ï–ú–´:")
    context_parts.append(f"- –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {session.context.current_working_dir}")
    context_parts.append(f"- –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {session.metadata.get('user_skill_level', 'beginner')}")

    # 2. –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –ö–û–ú–ê–ù–î
    recent_events = session.get_recent_events(3)

    if recent_events:
        context_parts.append("\n–ü–û–°–õ–ï–î–ù–ò–ï –ö–û–ú–ê–ù–î–´:")
        for event in recent_events[-3:]:
            status = "–£–°–ü–ï–•" if event.status == "SUCCESS" else "–û–®–ò–ë–ö–ê"
            context_parts.append(f"- {event.command} [{status}]")
            if event.output and len(event.output.strip()) < 50 and event.status == "SUCCESS":
                context_parts.append(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {event.output.strip()}")

    # 3. –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –ó–ê–ü–†–û–°–ê
    prompt_lower = prompt.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if any(word in prompt_lower for word in ['–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', 'find', 'search', 'grep']):
        context_parts.append("\n–¢–ò–ü –ó–ê–ü–†–û–°–ê: –ü–û–ò–°–ö")
        context_parts.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ñ–∞–π–ª—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ")

    elif any(word in prompt_lower for word in ['—Å–æ–∑–¥–∞–π', '—Å–¥–µ–ª–∞–π', 'create', 'make', 'mkdir', 'touch']):
        context_parts.append(f"\n–¢–ò–ü –ó–ê–ü–†–û–°–ê: –°–û–ó–î–ê–ù–ò–ï")
        context_parts.append(f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {session.context.current_working_dir}")

    elif any(word in prompt_lower for word in ['—É–¥–∞–ª–∏', '—É–¥–∞–ª–∏—Ç—å', 'remove', 'delete', 'rm']):
        context_parts.append("\n–¢–ò–ü –ó–ê–ü–†–û–°–ê: –£–î–ê–õ–ï–ù–ò–ï")
        context_parts.append("–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã")

    elif any(word in prompt_lower for word in ['–ø–æ–∫–∞–∂–∏', '–æ—Ç–∫—Ä–æ–π', 'show', 'display', 'cat', 'less']):
        context_parts.append("\n–¢–ò–ü –ó–ê–ü–†–û–°–ê: –ü–†–û–°–ú–û–¢–†")
        context_parts.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

    # 4. –£–ß–ï–¢ –ü–†–ï–î–´–î–£–©–ò–• –û–®–ò–ë–û–ö
    recent_errors = [e for e in recent_events if e.status == "ERROR"]
    if recent_errors:
        context_parts.append("\n–ü–†–ï–î–´–î–£–©–ò–ï –û–®–ò–ë–ö–ò (–∏–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è):")
        for error in recent_errors[-2:]:
            error_msg = error.error[:100] + "..." if len(error.error) > 100 else error.error
            context_parts.append(f"- {error.command}")
            context_parts.append(f"  –û—à–∏–±–∫–∞: {error_msg}")

    # 5. –ê–î–ê–ü–¢–ê–¶–ò–Ø –ö –£–†–û–í–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    user_level = session.metadata.get("user_skill_level", "beginner")
    if user_level == "beginner":
        context_parts.append("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    elif user_level == "advanced":
        context_parts.append("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (awk, sed, pipes)")

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    context_str = "\n".join(context_parts)

    enhanced_prompt = f"""{context_str}

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {prompt}

–°–ì–ï–ù–ï–†–ò–†–£–ô–¢–ï –ë–ê–®-–ö–û–ú–ê–ù–î–£:"""

    logger.debug(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç): {context_str}")
    return enhanced_prompt


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    help_text = f"""
{Fore.CYAN}{'=' * 60}
üÜò –°–ü–†–ê–í–ö–ê –ü–û AI-–ê–°–°–ò–°–¢–ï–ù–¢–£ (–°–ï–°–°–ò–ò)
{'=' * 60}{Style.RESET_ALL}

{Fore.GREEN}üìå –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:{Style.RESET_ALL}
  ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏

{Fore.YELLOW}üîß –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´:{Style.RESET_ALL}
  ‚Ä¢ {Fore.CYAN}help{Style.RESET_ALL}    - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  ‚Ä¢ {Fore.CYAN}history{Style.RESET_ALL} - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  ‚Ä¢ {Fore.CYAN}session{Style.RESET_ALL} - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
  ‚Ä¢ {Fore.CYAN}context{Style.RESET_ALL} - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–î
  ‚Ä¢ {Fore.CYAN}clear{Style.RESET_ALL}   - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  ‚Ä¢ {Fore.CYAN}exit{Style.RESET_ALL}    - –≤—ã—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏

{Fore.BLUE}üí° –°–ï–°–°–ò–ò –ò –ö–û–ù–¢–ï–ö–°–¢:{Style.RESET_ALL}
  ‚Ä¢ –ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥

{Fore.MAGENTA}üìä –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:{Style.RESET_ALL}
  ‚Ä¢ –°–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ {Fore.CYAN}sessions/{Style.RESET_ALL}
  ‚Ä¢ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏

{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}
"""
    print(help_text)


def show_session_history(session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    if not session.events:
        print(f"{Fore.YELLOW}üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        return

    print(f"\n{Fore.CYAN}{'=' * 60}")
    print(f"üìú –ò–°–¢–û–†–ò–Ø –°–ï–°–°–ò–ò {session.id[:8]}... ({len(session.events)} –∫–æ–º–∞–Ω–¥)")
    print(f"{'=' * 60}{Style.RESET_ALL}\n")

    for i, event in enumerate(session.events[-10:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–∞–Ω–¥
        status_icon = {
            "SUCCESS": f"{Fore.GREEN}‚úÖ",
            "ERROR": f"{Fore.RED}‚ùå",
            "BLOCKED": f"{Fore.RED}üö®",
            "CANCELLED": f"{Fore.YELLOW}‚è≠Ô∏è",
            "GENERATION_ERROR": f"{Fore.RED}ü§ñ",
            "SYSTEM_ERROR": f"{Fore.RED}üí•"
        }
        icon = status_icon.get(event.status, "")

        time_str = event.timestamp.strftime("%H:%M:%S")
        print(f"{icon} {Fore.WHITE}[{i}]{Style.RESET_ALL} {Fore.CYAN}{event.query}{Style.RESET_ALL}")
        print(f"    ‚Üí {Fore.YELLOW}{event.command}{Style.RESET_ALL}")
        print(f"    [{event.status}] –≤ {time_str}")
        if event.execution_time:
            print(f"    ‚è±Ô∏è {event.execution_time:.2f}—Å\n")
        else:
            print()

    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")